{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"canvas\", {\n  id: \"myChart\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_2 = [_hoisted_1];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [..._hoisted_2]);\n}","map":{"version":3,"names":["_createElementVNode","id","_hoisted_1","_createElementBlock","_hoisted_2"],"sources":["/Users/pangpntt/Desktop/kmitl/Devtool/devTool/src/components/GraphPage.vue"],"sourcesContent":["<template>\n  <div>\n    <canvas id=\"myChart\"></canvas>\n  </div>\n</template>\n\n<script>\nimport Chart from 'chart.js/auto';\n// import { Colors } from 'chart.js';\n// import axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      aqidata: [\n        {\n          day: \"2024-02-25\", //sun\n          aqi: 150\n        },\n        {\n          day: \"2024-02-26\", //mon\n          aqi: 150\n        },\n        {\n          day: \"2024-02-27\", //tues\n          aqi: 150\n        },\n        {\n          day: \"2024-02-28\", //wed\n          aqi: 120\n        },\n        {\n          day: \"2024-02-29\", //thurs\n          aqi: 220\n        },\n        {\n          day: \"2024-03-01\", //fri\n          aqi: 240\n        },\n        {\n          day: \"2024-03-02\", //sat\n          aqi: 140\n        },\n        {\n          day: \"2024-03-03\", //sun\n          aqi: 100\n        },\n        {\n          day: \"2024-03-04\", //mon\n          aqi: 120\n        },\n        {\n          day: \"2024-03-05\", //tues\n          aqi: 140\n        },\n        {\n          day: \"2024-03-06\", //wed\n          aqi: 160\n        },\n        {\n          day: \"2024-03-07\", //thurs\n          aqi: 180\n        },\n        {\n          day: \"2024-03-08\", //fri\n          aqi: 180\n        },\n        {\n          day: \"2024-03-09\", //sat\n          aqi: 180\n        },\n        {\n          day: \"2024-03-10\", //sun\n          aqi: 120\n        },\n        {\n          day: \"2024-03-11\", //mon\n          aqi: 200\n        },\n        {\n          day: \"2024-03-12\", //tues\n          aqi: 500\n        },\n        {\n          day: \"2024-03-13\", //wed\n          aqi: 10\n        },\n\n\n      ]\n    }\n  },\n  mounted() {\n    this.renderChart();\n    // this.access_token = localStorage.getItem(\"token\");\n    // axios.get('', {\n    //             headers: {\n    //                 'Authorization': `token ${this.access_token}`\n    //             }\n    //         })\n    //             .then((res) => {\n    //                 console.log(res.data);\n    //                 this.aqidata = res.data;\n    //                 this.createChart();\n    //             })\n    //             .catch((error) => {\n    //                 console.error(error);\n    //             });\n  },\n  methods: {\n    renderChart() {\n\n      const ctx = document.getElementById('myChart');\n      const { data, labels } = this.filterDataByDayOfWeek(this.aqidata);\n\n      // this.access_token = localStorage.getItem(\"token\");\n      // axios.get('', {\n      //             headers: {\n      //                 'Authorization': `token ${this.access_token}`\n      //             }\n      //         })\n      //             .then((res) => {\n      //                 console.log(res.data);\n      //                 this.aqidata = res.data;\n      //                 this.createChart();\n      //             })\n      //             .catch((error) => {\n      //                 console.error(error);\n      //             });\n\n      if (data[1] !== 0) {\n\n        new Chart(ctx, {\n\n          type: 'line',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: 'Values of Aqi',\n              data: data,\n              borderWidth: 3,\n              lineTension: 0.5,\n              borderColor: 'red',\n              backgroundColor: 'white',\n              pointBackgroundColor: 'black',\n              hoverBorderColor: 'black',\n\n            }]\n          },\n          options: {\n            scales: {\n              y: {\n                beginAtZero: true\n              }\n            },\n              plugins: {\n                legend: {\n                  labels: {\n                    // This more specific font property overrides the global property\n                    font: {\n                      size: 20\n                    }\n                  }\n                }\n              }\n            ,\n              backgroundColor: 'black',\n\n            }\n          });\n      }\n    },\n    filterDataByDayOfWeek(data) {\n      const filteredData = Array(7).fill(0);\n      const dayLabels = [];\n      const last7DaysData = data.slice(-7);\n      let index = 0;\n\n      last7DaysData.forEach(item => {\n        const date = new Date(item.day);\n        const dayOfWeekIndex1 = date.getUTCDay();\n        filteredData[index] = item.aqi;\n        const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        dayLabels.push(dayNames[dayOfWeekIndex1]);\n        index += 1;\n      });\n\n      return { data: filteredData, labels: dayLabels };\n    }\n  }\n}\n\n</script>\n"],"mappings":";gCAEIA,mBAAA,CAA8B;EAAtBC,EAAE,EAAC;AAAS;oBAApBC,UAA8B,C;;uBADhCC,mBAAA,CAEM,aAHR,IAAAC,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}